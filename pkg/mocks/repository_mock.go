// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetURL mocks base method.
func (m *MockRepository) GetURL(link string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRepositoryMockRecorder) GetURL(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRepository)(nil).GetURL), link)
}

// SaveURL mocks base method.
func (m *MockRepository) SaveURL(URL, link string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", URL, link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockRepositoryMockRecorder) SaveURL(URL, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockRepository)(nil).SaveURL), URL, link)
}

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// DBCheckURL mocks base method.
func (m *MockDBRepository) DBCheckURL(URL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBCheckURL", URL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBCheckURL indicates an expected call of DBCheckURL.
func (mr *MockDBRepositoryMockRecorder) DBCheckURL(URL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBCheckURL", reflect.TypeOf((*MockDBRepository)(nil).DBCheckURL), URL)
}

// DBGetURL mocks base method.
func (m *MockDBRepository) DBGetURL(link string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBGetURL", link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBGetURL indicates an expected call of DBGetURL.
func (mr *MockDBRepositoryMockRecorder) DBGetURL(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBGetURL", reflect.TypeOf((*MockDBRepository)(nil).DBGetURL), link)
}

// DBSaveURL mocks base method.
func (m *MockDBRepository) DBSaveURL(URL, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBSaveURL", URL, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBSaveURL indicates an expected call of DBSaveURL.
func (mr *MockDBRepositoryMockRecorder) DBSaveURL(URL, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBSaveURL", reflect.TypeOf((*MockDBRepository)(nil).DBSaveURL), URL, link)
}
